# nginx.conf.template - Tu configuración funcional con la corrección para GoTrue

# El servidor principal que procesará todas las peticiones.
server {
    # Nginx escuchará en el puerto que Railway le asigne.
    listen ${PORT};
    server_name _;
    underscores_in_headers on;

    # GoTrue
    location /gotrue/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Max-Age' 3600 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        proxy_pass http://${ENV_GOTRUE}:${ENV_GOTRUE_PORT};

        rewrite ^/gotrue(/.*)$ $1 break;

        # Allow headers like redirect_to to be handed over to the gotrue
        # for correct redirecting
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
    }

    # WebSocket
    location /ws {
        proxy_pass http://${ENV_APPFLOWY_CLOUD}:${ENV_APPFLOWY_CLOUD_PORT};

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header Cookie $http_cookie;
        proxy_read_timeout 86400s;
    }

    location /api {
      proxy_pass http://${ENV_APPFLOWY_CLOUD}:${ENV_APPFLOWY_CLOUD_PORT};
      proxy_set_header X-Request-Id $request_id;
      proxy_set_header Host $http_host;

      # Set CORS headers for other requests
      if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Client-Version, Device-Id' always;
          add_header 'Access-Control-Max-Age' 3600 always;
          return 204;
      }

      add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Client-Version, Device-Id' always;
      add_header 'Access-Control-Max-Age' 3600 always;

      location ~* ^/api/workspace/([a-zA-Z0-9_-]+)/publish$ {
          proxy_pass http://${ENV_APPFLOWY_CLOUD}:${ENV_APPFLOWY_CLOUD_PORT};
          proxy_request_buffering off;
          client_max_body_size 256M;
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Client-Version, Device-Id' always;
              add_header 'Access-Control-Max-Age' 3600 always;
              return 204;
          }

          add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Client-Version, Device-Id' always;
          add_header 'Access-Control-Max-Age' 3600 always;
      }

      # AppFlowy-Cloud
      location /api/chat {
        # Handle OPTIONS pre-flight request for CORS
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Client-Version, Device-Id' always;
              add_header 'Access-Control-Max-Age' 3600 always;
              return 204;
          }

          # Add CORS header for actual requests
          add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;

          proxy_pass http://${ENV_APPFLOWY_CLOUD}:${ENV_APPFLOWY_CLOUD_PORT};

          proxy_http_version 1.1;
          proxy_set_header Connection "";
          chunked_transfer_encoding on;
          proxy_buffering off;
          proxy_cache off;

          proxy_read_timeout 600s;
          proxy_connect_timeout 600s;
          proxy_send_timeout 600s;
      }

      location /api/import {
          proxy_pass http://${ENV_APPFLOWY_CLOUD}:${ENV_APPFLOWY_CLOUD_PORT};

          # Set headers
          proxy_set_header X-Request-Id $request_id;
          proxy_set_header Host $http_host;

          # Handle CORS
          add_header 'Access-Control-Allow-Origin' ${ENV_WEB_ORIGIN} always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Device-Id' always;
          add_header 'Access-Control-Max-Age' 3600 always;

          # Timeouts
          proxy_read_timeout 600s;
          proxy_connect_timeout 600s;
          proxy_send_timeout 600s;

          # Disable buffering for large file uploads
          proxy_request_buffering off;
          proxy_buffering off;
          proxy_cache off;
          client_max_body_size 2G;
      }
  }

    # Minio Web UI
    # Derive from: https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html
    # Optional Module, comment this section if you did not deploy minio in docker-compose.yml
    # This endpoint is meant to be used for the MinIO Web UI, accessible via the admin portal
    location /minio/ {
        proxy_pass http://${ENV_MINIO_UI}:${ENV_MINIO_UI_PORT};

        rewrite ^/minio/(.*) /$1 break;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-NginX-Proxy true;

        ## This is necessary to pass the correct IP to be hashed
        real_ip_header X-Real-IP;

        proxy_connect_timeout 300s;

        ## To support websockets in MinIO versions released after January 2023
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # Some environments may encounter CORS errors (Kubernetes + Nginx Ingress)
        # Uncomment the following line to set the Origin request to an empty string
        proxy_set_header Origin '';

        chunked_transfer_encoding off;
    }

    # Optional Module, comment this section if you did not deploy minio in docker-compose.yml
    # This is used for presigned url, which is needs to be exposed to the AppFlowy client application.
    location /minio-api/ {
        proxy_pass http://${ENV_MINIO}:${ENV_MINIO_PORT};

        # Set the host to internal host because the presigned url was signed against the internal host
        proxy_set_header Host ${ENV_MINIO};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        rewrite ^/minio-api/(.*) /$1 break;

        proxy_connect_timeout 300s;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;
    }

    # PgAdmin
    # Optional Module, comment this section if you did not deploy pgadmin in docker-compose.yml
    location /pgadmin/ {
        # La barra (/) al final de proxy_pass es el cambio más importante.
        # Le dice a NGINX que reemplace /pgadmin/ con / en la petición al servicio.
        proxy_pass http://${ENV_PGADMIN}:${ENV_PGADMIN_PORT}/;

        # Encabezados estándar para un proxy reverso
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Este encabezado es requerido por pgAdmin para generar las URLs correctamente
        proxy_set_header X-Script-Name /pgadmin;

        # Evita que pgAdmin intente hacer redirecciones incorrectas
        proxy_redirect off;
    }

    # RedisInsight Web UI
    location /redisinsight/ {
        # La barra al final es importante para que las rutas internas de la UI funcionen
        proxy_pass http://${ENV_REDISINSIGHT}:${ENV_REDISINSIGHT_PORT}/;

        # Encabezados estándar para un proxy reverso
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Upgrade $http_upgrade;

        # Este encabezado es requerido por RedisInsight para generar las URLs correctamente
        proxy_set_header X-Script-Name /redisinsight;

        # Evita que RedisInsight intente hacer redirecciones incorrectas
        proxy_redirect off;
    }

    # Consola de Administración
    location /console {
        # Nota: Asumo nuevas variables para la consola de admin.
        proxy_pass http://${ENV_ADMIN_FRONTEND_HOST}:${ENV_ADMIN_FRONTEND_PORT};

        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $host;
    }

    # AppFlowy Web
    location / {
        proxy_pass http://${ENV_APPFLOWY_WEB}:${ENV_APPFLOWY_WEB_PORT};
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $host;
    }
}